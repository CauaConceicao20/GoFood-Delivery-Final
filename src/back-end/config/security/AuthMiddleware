import TokenService from '../services/TokenService.js';
import { UnauthorizedError, ForbiddenError } from '../exception/GlobalExceptions.js';

class AuthMiddleware {
    constructor() {
        this.tokenService = new TokenService();
    }

    autenticar(req, res, next) {
        try {
            const token = req.cookies?.token || req.headers.authorization?.replace('Bearer ', '');

            if (!token) {
                throw new UnauthorizedError('Token não fornecido');
            }

            const payload = this.tokenService.validarToken(token);

            if (!payload) {
                throw new UnauthorizedError('Token inválido ou expirado');
            }

            req.usuario = payload;
            next();

        } catch (error) {
            next(error);
        }
    }

    autorizar(gruposPermitidos) {
        return (req, res, next) => {
            const grupoUsuario = req.usuario?.grupo;

            if (!grupoUsuario || !gruposPermitidos.includes(grupoUsuario)) {
                return next(new ForbiddenError('Acesso negado'));
            }

            next();
        };
    }
}

export default AuthMiddleware;